print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
rm(list=ls())
p_coins <- c(0.6,0.8,0.6)
de_indep <- DiceEnterprise$new(G=list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
), verbose = TRUE)
toss.coins <- function(true_p) { #tosses the three coins
assign("tot_tosses_indep_coins", tot_tosses_indep_coins+length(p_coins), envir = .GlobalEnv)
return(sapply(true_p, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
roll.die <- function(n,toss.fun) { #roll the die
res <- numeric(n)
for(i in 1:n) {
while(TRUE) {
toss_res <- toss.fun(p_coins)
if(isTRUE(all.equal(toss_res,c(1,1,1)))) {
res[i] <- 1 #q0
break
} else if(isTRUE(all.equal(toss_res,c(2,1,1)))) {
res[i] <- 2 #q1
break
} else if(isTRUE(all.equal(toss_res,c(1,2,1)))) {
res[i] <- 3 #q2
break
} else if(isTRUE(all.equal(toss_res,c(1,1,2)))) {
res[i] <- 4 #q3
break
} else {
res[i] <- 5 #none of the above
break
}
}
}
return(res)
}
sample_size <- 10000
print(paste0("True prob: ",prod(p_coins)," - ",
(1-p_coins[1])*p_coins[2]*p_coins[3]," - ",
p_coins[1]*(1-p_coins[2])*p_coins[3]," - ",
p_coins[1]*p_coins[2]*(1-p_coins[3])," - "))
print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
rm(list=ls())
p_coins <- c(0.6,0.8,0.6)
tot_tosses_indep_coins <- 0 #Global variable
de_indep <- DiceEnterprise$new(G=list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
), verbose = TRUE)
toss.coins <- function(true_p) { #tosses the three coins
assign("tot_tosses_indep_coins", tot_tosses_indep_coins+length(p_coins), envir = .GlobalEnv)
return(sapply(true_p, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
roll.die <- function(n,toss.fun) { #roll the die
res <- numeric(n)
for(i in 1:n) {
while(TRUE) {
toss_res <- toss.fun(p_coins)
if(isTRUE(all.equal(toss_res,c(1,1,1)))) {
res[i] <- 1 #q0
break
} else if(isTRUE(all.equal(toss_res,c(2,1,1)))) {
res[i] <- 2 #q1
break
} else if(isTRUE(all.equal(toss_res,c(1,2,1)))) {
res[i] <- 3 #q2
break
} else if(isTRUE(all.equal(toss_res,c(1,1,2)))) {
res[i] <- 4 #q3
break
} else {
res[i] <- 5 #none of the above
break
}
}
}
return(res)
}
sample_size <- 10000
print(paste0("True prob: ",prod(p_coins)," - ",
(1-p_coins[1])*p_coins[2]*p_coins[3]," - ",
p_coins[1]*(1-p_coins[2])*p_coins[3]," - ",
p_coins[1]*p_coins[2]*(1-p_coins[3])," - "))
print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
tot_tosses_indep_coins <- 0 #Global variable
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
rm(list=ls())
p_coins <- c(0.6,0.8,0.6)
tot_tosses_indep_coins <- 0 #Global variable
de_indep <- DiceEnterprise$new(G=list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
), verbose = TRUE)
toss.coins <- function(true_p) { #tosses the three coins
assign("tot_tosses_indep_coins", tot_tosses_indep_coins+length(p_coins), envir = .GlobalEnv)
return(sapply(true_p, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
roll.die <- function(n,toss.fun) { #roll the die
res <- numeric(n)
for(i in 1:n) {
while(TRUE) {
toss_res <- toss.fun(p_coins)
if(isTRUE(all.equal(toss_res,c(1,1,1)))) {
res[i] <- 1 #q0
break
} else if(isTRUE(all.equal(toss_res,c(2,1,1)))) {
res[i] <- 2 #q1
break
} else if(isTRUE(all.equal(toss_res,c(1,2,1)))) {
res[i] <- 3 #q2
break
} else if(isTRUE(all.equal(toss_res,c(1,1,2)))) {
res[i] <- 4 #q3
break
} else {
res[i] <- 5 #none of the above
break
}
}
}
return(res)
}
sample_size <- 10000
print(paste0("True prob: ",prod(p_coins)," - ",
(1-p_coins[1])*p_coins[2]*p_coins[3]," - ",
p_coins[1]*(1-p_coins[2])*p_coins[3]," - ",
p_coins[1]*p_coins[2]*(1-p_coins[3])," - "))
print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
print(paste0("True prob:",p_coins[1]/sum(p_coins)," - ",p_coins[2]/sum(p_coins)," - ",p_coins[3]/sum(p_coins)))
assign("tot_tosses_indep_coins", 0, envir = .GlobalEnv)
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
print(paste0("True prob:",p_coins[1]/sum(p_coins)," - ",p_coins[2]/sum(p_coins)," - ",p_coins[3]/sum(p_coins)))
rm(list=ls())
p_coins <- c(0.6,0.8,0.6)
de_indep <- DiceEnterprise$new(G=list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
), verbose = TRUE)
toss.coins <- function(true_p) { #tosses the three coins
return(sapply(true_p, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
roll.die <- function(n,toss.fun) { #roll the die
res <- numeric(n)
for(i in 1:n) {
while(TRUE) {
toss_res <- toss.fun(p_coins)
if(isTRUE(all.equal(toss_res,c(1,1,1)))) {
res[i] <- 1 #q0
break
} else if(isTRUE(all.equal(toss_res,c(2,1,1)))) {
res[i] <- 2 #q1
break
} else if(isTRUE(all.equal(toss_res,c(1,2,1)))) {
res[i] <- 3 #q2
break
} else if(isTRUE(all.equal(toss_res,c(1,1,2)))) {
res[i] <- 4 #q3
break
} else {
res[i] <- 5 #none of the above
break
}
}
}
return(res)
}
sample_size <- 10000
print(paste0("True prob: ",prod(p_coins)," - ",
(1-p_coins[1])*p_coins[2]*p_coins[3]," - ",
p_coins[1]*(1-p_coins[2])*p_coins[3]," - ",
p_coins[1]*p_coins[2]*(1-p_coins[3])," - "))
print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
print(paste0("True prob:",p_coins[1]/sum(p_coins)," - ",p_coins[2]/sum(p_coins)," - ",p_coins[3]/sum(p_coins)))
print(table(res)/sample_size)
plotConfidenceInterval(res,p_coins/sum(p_coins))
13.7328*3
sum(p_coins)
3/2
rm(list=ls())
p_coins <- c(0.16,0.18,0.06)
de_indep <- DiceEnterprise$new(G=list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
), verbose = TRUE)
toss.coins <- function(true_p) { #tosses the three coins
return(sapply(true_p, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
roll.die <- function(n,toss.fun) { #roll the die
res <- numeric(n)
for(i in 1:n) {
while(TRUE) {
toss_res <- toss.fun(p_coins)
if(isTRUE(all.equal(toss_res,c(1,1,1)))) {
res[i] <- 1 #q0
break
} else if(isTRUE(all.equal(toss_res,c(2,1,1)))) {
res[i] <- 2 #q1
break
} else if(isTRUE(all.equal(toss_res,c(1,2,1)))) {
res[i] <- 3 #q2
break
} else if(isTRUE(all.equal(toss_res,c(1,1,2)))) {
res[i] <- 4 #q3
break
} else {
res[i] <- 5 #none of the above
break
}
}
}
return(res)
}
sample_size <- 100
print(paste0("True prob: ",prod(p_coins)," - ",
(1-p_coins[1])*p_coins[2]*p_coins[3]," - ",
p_coins[1]*(1-p_coins[2])*p_coins[3]," - ",
p_coins[1]*p_coins[2]*(1-p_coins[3])," - "))
print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
print(paste0("True prob:",p_coins[1]/sum(p_coins)," - ",p_coins[2]/sum(p_coins)," - ",p_coins[3]/sum(p_coins)))
print(table(res)/sample_size)
plotConfidenceInterval(res,p_coins/sum(p_coins))
sample_size <- 1000
print(paste0("True prob: ",prod(p_coins)," - ",
(1-p_coins[1])*p_coins[2]*p_coins[3]," - ",
p_coins[1]*(1-p_coins[2])*p_coins[3]," - ",
p_coins[1]*p_coins[2]*(1-p_coins[3])," - "))
print(table(roll.die(sample_size, toss.fun = toss.coins))/sample_size)
res <- de_indep$sample(n = sample_size, roll.fun = roll.die, verbose = TRUE, toss.fun = toss.coins, num_cores = 4)
print(paste0("True prob:",p_coins[1]/sum(p_coins)," - ",p_coins[2]/sum(p_coins)," - ",p_coins[3]/sum(p_coins)))
print(table(res)/sample_size)
plotConfidenceInterval(res,p_coins/sum(p_coins))
?any
any(c(1,0,2,0) == 0)
any(c(1,10,2,0) == 0)
any(c(1,10,2,10) == 0)
0.1+0.7+0.55
0.1/1.35
0.7/1.35
0.55/1.35
0.074+0.519+0.407
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
toss.coins <- function(indep_coins_probs) {
return(sapply(indep_coins_probs, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
f_indep_coins <- list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
)
ce <- CoinsEnterprise$new(f_indep_coins)
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
ce <- CoinsEnterprise$new(f_indep_coins)
ce <- CoinsEnterprise$new(f_indep_coins, verbose = TRUE)
ce
ce$sample(n = 10)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(1,1,0.1))
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(1,1,0.1))
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
toss.coins <- function(indep_coins_probs) {
return(sapply(indep_coins_probs, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
f_indep_coins <- list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
)
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(1,1,0.1))
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, indep_coins_probs = c(1,1,0.1))
toss.coins <- function(probs) {
return(sapply(probs, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(1,1,0.1))
CoinsEnterprise$debug("sample")
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(1,1,0.1))
roll.fun(1)
roll.fun(1,...)
roll.fun(10,...)
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
CoinsEnterprise$debug("sample")
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(1,1,0.1))
roll.fun(10,...)
roll.fun(10,...)
roll.fun(100,...)
sample_fine_connected
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
CoinsEnterprise$debug("sample")
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
any(toss_res == 0)
isTRUE(all.equal(toss_res,rep(1,m)))
which(toss_res == 2)+1
which(toss_res == 2)
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(17)
ce <- CoinsEnterprise$new(f_indep_coins)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
which(toss_res == 2)
toss_res <- c(2,2,2)
ce$sample(n = 10, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
ce$sample(n = 1000, toss.coins = toss.coins, probs = c(0.1,0.7,0.55))
ce$sample(n = 1000, toss.coins = toss.coins, n_cores = 2, verbose = TRUE, probs = c(0.1,0.7,0.55))
ce$sample(n = 1000, toss.coins = toss.coins, num_cores = 2, verbose = TRUE, probs = c(0.1,0.7,0.55))
indep_coins_probs <- c(0.4,0.7,0.55)
print(indep_coins_probs/sum(indep_coins_probs))
25/9
25/99
14+8
library(DiceEnterprise)
any(c(1,2,3,NA,NULL,6) == 1)
any(c(1,2,3,NA,NULL,6) == 10)
if(any(c(1,2,3,NA,NULL,6) == 10)) {8}
?any
any(c(1,2,3,NA,NULL,6) == 10, na.rm = TRUE)
which(c(1,2,3,NA,NULL,6) == 10, na.rm = TRUE)
which(c(1,2,3,NA,NULL,6) == 10)
which(c(1,2,3,NA,NULL,6) == 1)
which(c(1,2,3,NA,NULL,6,1) == 1)
library(DiceEnterprise)
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(10, "L'Ecuyer-CMRG")
toss_coin <- function(n) {
sample(1:2, size = n, replace = TRUE, prob = c(3/4,1/4))
}
f_1 <- list(coeff = c(sqrt(2)), power = c(3)) #f(p)
f_2 <- list(coeff = c(-5,11,-9,3), power = c(3,2,1,0)) #1-f(p)
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
print(fp_tosses)
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2, verbose = TRUE)
print(bf)
print(bf$evaluate(3/4))
fp_tosses <- bf$sample(n = 1000, roll.fun = toss_coin, num_cores = 2, verbose = TRUE, double= TRUE) #Produces 1000 tosses of the f(p)-coin, using 2 cores and doubling the time step at each iteration of CFTP.
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(10, "L'Ecuyer-CMRG")
toss_coin <- function(n) {
sample(1:2, size = n, replace = TRUE, prob = c(3/4,1/4))
}
f_1 <- list(coeff = c(sqrt(2)), power = c(3)) #f(p)
f_2 <- list(coeff = c(-5,11,-9,3), power = c(3,2,1,0)) #1-f(p)
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(10, "L'Ecuyer-CMRG")
toss_coin <- function(n) {
sample(1:2, size = n, replace = TRUE, prob = c(3/4,1/4))
}
f_1 <- list(coeff = c(sqrt(2)), power = c(3)) #f(p)
f_2 <- list(coeff = c(-5,11,-9,3), power = c(3,2,1,0)) #1-f(p)
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
toss_coin <- function(n) {
sample(1:2, size = n, replace = TRUE, prob = c(3/4,1/4))
}
f_1 <- list(coeff = c(sqrt(2)), power = c(3)) #f(p)
f_2 <- list(coeff = c(-5,11,-9,3), power = c(3,2,1,0)) #1-f(p)
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
BernoulliFactory$debug("sample")
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
DiceEnterprise$debug("sample")
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
Ladder$debug("sample")
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
double
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
CFTP(k = private$k, roll.fun = roll.fun, update.fun = self$update.fun.global,
monotonic = monotonic_CFTP, min = 1, max = private$k,verbose=verbose, double = double,...)
library(DiceEnterprise)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=7, fig.height=4,
cache=TRUE
)
require("DiceEnterprise")
set.seed(10, "L'Ecuyer-CMRG")
f_1 <- list(coeff = c(sqrt(2)), power = c(3)) #f(p)
f_2 <- list(coeff = c(-5,11,-9,3), power = c(3,2,1,0)) #1-f(p)
bf <- BernoulliFactory$new(f_1 = f_1, f_2 = f_2) #f_1 = f(p), f_2 = 1-f(p)
fp_tosses <- bf$sample(n = 10, roll.fun = toss_coin) #Produces 10 tosses of the f(p)-coin
print(fp_tosses)
ce1 <- CoinsEnterprise$new(f_indep_coins1, toss.coins = toss.all.coins, die_type = "toss_all")
toss.all.coins <- function(probs) {
return(sapply(probs, function(p) {sample(1:2, size = 1, prob = c(p,1-p))})) #1 or 2 (not 0))
}
f_indep_coins1 <- list(
list(rep(1,4),c("20000","10100","10010","00110")),
list(rep(1,4),c("20000","11000","10010","01010")),
list(rep(1,4),c("20000","11000","10100","01100"))
)
CoinsEnterprise$debug("sample")
ce1 <- CoinsEnterprise$new(f_indep_coins1, toss.coins = toss.all.coins, die_type = "toss_all")
indep_coins_probs <- c(0.4,0.7,0.55)
result <- ce1$sample(n = 1000, num_cores = 2, verbose = TRUE,  double_time = TRUE, probs = indep_coins_probs) #the argument probs is passed to toss.coins
double_time
result <- ce1$sample(n = 1000, num_cores = 2, verbose = TRUE,  double_time = TRUE, probs = indep_coins_probs) #the argument probs is passed to toss.coins
result <- ce1$sample(n = 1000, num_cores = 2, verbose = TRUE,  double_time = TRUE, probs = indep_coins_probs) #the argument probs is passed to toss.coins
double_time
CFTP(k = private$k, roll.fun = roll.fun, update.fun = self$update.fun,
monotonic = monotonic_CFTP, min = 1, max = private$k,verbose=verbose, double_time = double_time)
library(DiceEnterprise)
unlink('vignettes/PaperExamples_cache', recursive = TRUE)
